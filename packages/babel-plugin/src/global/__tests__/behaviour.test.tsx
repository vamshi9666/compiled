import { transformSync } from '@babel/core';
import babelPlugin from '../../index';

const transform = (code: TemplateStringsArray) => {
  return transformSync(code[0], {
    configFile: false,
    babelrc: false,
    highlightCode: false,
    plugins: [babelPlugin],
  })?.code;
};

describe('global component transform', () => {
  it('should transform global component', () => {
    const actual = transform`
      import { Global } from '@compiled/react';

      <Global styles={{ fontSize: 20 }} />
    `;

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */

      import * as React from 'react';
      import { ax, ix, CC, CS } from \\"@compiled/react/runtime\\";
      const _ = \\":root{font-size:20px}\\";
      <CC>
          <CS>{[_]}</CS>
        </CC>;"
    `);
  });

  it('should replace the global component with null if there is no style prop', () => {
    const actual = transform`
      import { Global } from '@compiled/react';

      <Global />
    `;

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */

      import * as React from 'react';
      import { ax, ix, CC, CS } from \\"@compiled/react/runtime\\";
      null;"
    `);
  });

  it('should replace the global component with null if there are no defined styles', () => {
    const actual = transform`
      import { Global } from '@compiled/react';

      <Global styles={{}} />
    `;

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */

      import * as React from 'react';
      import { ax, ix, CC, CS } from \\"@compiled/react/runtime\\";
      null;"
    `);
  });

  it('should throw if any dynamic declarations were found', () => {
    expect(() => {
      transform`
        import { Global } from '@compiled/react';

        let fontSize = 10;
        fontSize = 20;

        <Global styles={{ fontSize }} />
      `;
    }).toThrowErrorMatchingSnapshot();
  });

  it('should throw if any dynamic declarations were found', () => {
    expect(() => {
      transform`
        import { Global } from '@compiled/react';

        const isSomething = true;
        <Global styles={[isSomething && { fontSize: 20 }]} />
      `;
    }).toThrowErrorMatchingSnapshot();
  });
});
